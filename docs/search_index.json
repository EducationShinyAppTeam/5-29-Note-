[
["designStyle.html", "Chapter 5 Design Style 5.1 PSU Branding 5.2 Colors 5.3 Text Styling 5.4 Graphics", " Chapter 5 Design Style Design Style is the second side of the Visual Appearance of every app. Here, we deal with visual aspects that go beyond the layout of your App. This includes issues of branding, color, how you make text look (font, size, emphasis), and graphics (plots, tables, and images). 5.1 PSU Branding Given that we are all associated with Pennsylvania State University, we need to include the Penn State logo in each App. Rather than sticking the logo at the top of the Overview page, we are going to place the logo at the bottom of the sidebar. This has the benefit of having the logo appear throughout the entire App AND making the logo be as unobtrusive as possible. In your UI section of app.R (or the ui.R file), at the end of the dashboardSidebar() section, you will need to include the following: tags$div(class = &quot;sidebar-logo&quot;, boastUtils::psu_eberly_logo(&quot;reversed&quot;)) Here’s how this code would look in context: dashboardPage( skin = &quot;blue&quot;, dashboardHeader( title = &quot;title&quot;, # [omitted code] ), dashboardSidebar( width = 300, sidebarMenu( id = &quot;tabs&quot;, # [omitted code], tags$div( class = &quot;sidebar-logo&quot;, boastUtils::psu_eberly_logo(&quot;reversed&quot;) ) ), dashboardBody( tags$head( tags$link(rel = &quot;stylesheet&quot;, type = &quot;text/css&quot;, href = &quot;https://educationshinyappteam.github.io/Style_Guide/theme/boast.css&quot;), tabItems( # [omitted code] ) ) ) ) ) This will ensure that the Penn State logo gets properly used. 5.2 Colors Your App needs to have a consistent color scheme throughout. The color scheme should be checked against colorblindness to meet WCAG 2.1 Level AA. You can do so at the Coloring for Colorblindness website. If you are following this Style Guide (as you should be) then the vast majority of this section will be automatically handled for you. See Section 4.1.2 and Section 5.4.3 for additional information on the use of colors. 5.3 Text Styling Text styling refers the non-content aspects of the text on the page, such as the use of italics, boldface, alignment, as well as font size and color. You should let the centralized CSS file do the heavy lifting for text styling. (Again, using boastApp will help you.) However, for this to work properly, you will need to tag content appropriately. (See the section on HTML, Section 3.4.) If you run into a situation where some element needs additional styling, talk to Neil or Bob for help. You might have come across an element that needs to get added the central CSS file or a bug. 5.3.1 Headings Use the Heading Tags for the short fragments that define the structure of your App. If you find yourself enclosing a complete sentence in Heading tag, you ARE NOT using headings correctly. Notice how the headings in this Style Guide aren’t complete sentences; your App should mimic this. Full sentences appear as regular paragraph text (i.e., enclosed in p()) and not be a Heading. 5.3.2 Paragraph Text If you enclose text that gives instructions or other information to your App’s users in p() or li() (the later should be wrapped in either tags$ol() or tags$ul()), your App will understand how to style that text correctly. The central CSS file contains controls that set the base font size much larger than Shiny does natively as well as making text sizing dynamic. (This is important for making our apps mobile device friendly.) Again, using boastApp makes this process easier. If you want to make a certain word or phrase italic, you will need to wrap that text in tags$em(). Similarly, if you want do the same with boldface, you’ll use tags$strong(). For example, this code: p( &quot;When dealing with the &quot;, tags$em(&quot;t&quot;), &quot;-distribution, we only have one parameter, the &quot;, tags$strong(&quot;degrees of freedom&quot;), &quot;that we need to input.&quot; ) Becomes: When dealing with the t-distribution, we only have one parameter, the degrees of freedom that we need to input. Use italics (emphasis), and boldface (strong) sparingly. 5.3.3 Mathematics For the most part, any mathematics you need displayed should be done using MathJax. Default to using inline typesetting with the \\\\( and \\\\) delimiters. If you need to use display style, you can use \\\\[ and \\\\]. For the vast majority of mathematics, you’ll wrap both inline and display style mathematics inside of a paragraph environment (p()). If you’re writing mathematics directly in your app, remember you’ll need to escape the LaTeX commands by putting an extra backslash (\\) in front; e.g., \\frac{3}{4} would need to be \\\\frac{3}{4}. If you’re reading in mathematical text from an external CSV file, you do not need the extra backslash in the CSV file. If you need assistance in figuring out how to type up mathematics, please talk to Neil, Matt, or Dennis. Note: Double dollar sign delimiters are generally not recommended for displaying math as they can lead to unintended results. See: Writing Mathematics for MathJax. 5.3.4 [Game] Question Text The text used as a question in a game should NOT be wrapped in a Heading tag; wrap the text in a paragraph tag. 5.3.5 Label Text (Buttons, Sliders, Other Inputs and Alerts) By using the central CSS file, any text you included in/on buttons, dropdown menus, sliders, radio buttons, choices, and other inputs as well as alert messages and popups/rollovers, will automatically be styled correctly. Do not use heading tags, the paragraph tag, italics/emphasis, or boldface/strong with input labels. Input labels should be written in sentence case (i.e., capitalize only the first word and any proper nouns). You may use these tags with popups/rollovers. 5.3.6 Feedback and Hint Text Again, let the central CSS file handle the styling of this type of text. 5.3.7 Text in R Plots Unfortunately, any text in R plots does not get controlled by CSS. This means that you’ll have to play around with the settings. Using the ggplot2 package to make your plots (or other packages based upon the grid framework like lattice) will allow you to use the theme aspect to control text in your App. Here is an example for how to do this: # Create a ggplot2 object g1 &lt;- ggplot2::ggplot(data=df, aes(x=x, y=y, color=grp)) # Add your layers, for example g1 + ggplot2::geom_point() # Use theme to control text size g1 + ggplot2::theme( plot.caption = element_text(size = 18), text = element_text(size = 18) ) You will need to play around with the settings to find the appropriate value; text size 18 appears to work out well in many cases. Note: The text in your plot might not behave well for dynamic re-sizing on different mobile devices. 5.3.8 Text Case When writing text, you should use the appropriate case (i.e., which words you capitalize): Headings: use Title Case Paragraphs/Lists: use Sentence Case Input Labels: use Sentence Case Figure Captions: use Title Case Table Captions: use Title Case Graphs (see Section 5.4.1) Titles: use Title Case Axes: Use Sentence Case Legends: Use Sentence Case Default: Sentence Case 5.4 Graphics One of the most powerful tools we have in Statistics and Data Science is graphics. This includes images/pictures, graphs/plots, and tables. You will want to make sure that all graphical elements are appropriately sized in the Body. If there is text in a static image/picture, you’ll need to make sure that the text is legible on a variety of screen sizes. We’ve already discussed both issues of color and text size in plots. For additional considerations, please refer to the following readings (ordered from most important to least): Tufte-Fundamental Principles of Analytical Design Tufte-Chartjunk Kosslyn-Looking with the Eye and Mind Remember, we always want to be modeling excellent graphing behaviors. All photographs can be fortified with words. –Dorothea Lange A picture is worth a thousand words…but which ones? –Unknown Both of these quotations highlight that you need to include some text with your plots to help the user construct their understanding of what you’re trying to show them. 5.4.1 Titles and Labels Graph and Table titles should follow Title Case. Capitalize each word unless the word is “small” (e.g., of, an, etc.). The Title Case website can help you if you aren’t sure. (This website also does other types of case such as camel case.) 5.4.2 Axes and Scales R’s default axes are terrible. They often do not fully cover the data and the have gaps between the axes. All this impedes the user’s construction of meaning. Thus, you’ll want to take control and stipulate the axes and scales to optimize what users get out of the plot. If you are providing multiple plots that the user is supposed to compare, make sure that they all use the same scaling and axes. To force ggplot2 to place (0, 0) in the lower-left corner and to control the scales, you will need to include the following: # Create the ggplot2 object g1 &lt;- ggplot2::ggplot(...) # Add your layer g1 + ggplot2::geom_point() # Control axes and scale ## Multiplicative Scaling of the Horizontal (x) Axis ## Additive Scaling of the Vertical (y) Axis g1 + ggplot2::scale_x_continuous(expand = expansion(mult = c(1,2), add = 0)) + scale_y_continuous(expand = expansion(mult = 0, add = c(0,0.05))) 5.4.3 Color and Plots in R In R you can set color theme which you use in ggplot2. Here are two custom color palettes that you can use in your App. Additionally, the package viridis provides several additional color palettes which are improvements upon the default color scheme. # boastPalette is based on the Wong color blind set found at the above website. boastPalette &lt;- c(&quot;#0072B2&quot;,&quot;#D55E00&quot;,&quot;#009E73&quot;,&quot;#CE77A8&quot;, &quot;#000000&quot;,&quot;#E69F00&quot;,&quot;#999999&quot;,&quot;#56B4E9&quot;,&quot;#CC79A7&quot;) # psuPalette is based on Penn State&#39;s three official color palettes # and checked at the above webite. psuPalette &lt;- c(&quot;#1E407C&quot;,&quot;#BC204B&quot;,&quot;#3EA39E&quot;,&quot;#E98300&quot;, &quot;#999999&quot;,&quot;#AC8DCE&quot;,&quot;#F2665E&quot;,&quot;#99CC00&quot;) # Both palettes get used in the order of what is listed. Figure 5.1: The Boast Palette Figure 5.2: The PSU Palette To use these palettes (or ones from viridis) with a ggplot2 object, you’ll need to do the following # You will need to first add whichever palette line from above to your code boastPalette &lt;- c(&quot;#0072B2&quot;,&quot;#D55E00&quot;,&quot;#009E73&quot;,&quot;#CE77A8&quot;, &quot;#000000&quot;,&quot;#E69F00&quot;,&quot;#999999&quot;,&quot;#56B4E9&quot;,&quot;#CC79A7&quot;) # Create ggplot2 object g1 &lt;- ggplot2::ggplot(data = df, aes(x = x, y = y, color = grp, fill = grp)) # Add your layers g1 + ggplot2::geom_points() # Tell R to use your chosen palette g1 + ggplot2::scale_color_manual(values=boastPalette) # If you use &quot;color&quot; in aes g1 + ggplot2::scale_fill_manual(values=boastPalette) # If you use &quot;fill&quot; in aes If you have more groups than eight/nine colors listed in the two palettes, consider reworking your examples as you could overwhelm the user with too many colors. (This also applies to using different shapes to plot points.) With an eye towards accessibility, try not to use only color to denote a particular piece of information. Rather you might want to use color and shape. 5.4.4 Tables Data tables can pose a challenge for individuals to comprehend. Just as a wall of text isn’t conducive to helping a person understand what’s going on, neither is a wall of data values. Thus, we need to be extreme judicious (picky) about incorporating data tables into any of our apps. In web development there are two main types of tables: layout tables and data tables. Layout tables help control where different elements appear on the page. We need an additional distinction for data tables: Summary Data Tables are tables that have summary information; typified by two-way tables (a.k.a. contingency tables or crosstabs) but might also include other things such as values of descriptive statistics stratified by groups. Data Sets are an entire data object, presented in tabular format Layout Tables should never be used in a BOAST App. Data Sets should be displayed as sparingly as possible. In order to include a Data Set display, you will need to have identified an explicit learning goal/objective that necessitates the user digging through a data frame. If you can’t identify such a learning goal, you should NOT include a data frame. If the goal is to allow the user to look through the data set OR to have access to the data, then give a link to either the original source of the data (preferred) or for them to download the file. Summary Data Tables can be used more often and can enrich the user’s experience with your app. However, these must still be constructed in an appropriate manner. Neither Data Sets nor Summary Data Tables should be inserted into your App as a picture. This is an big Accessibility violation. Use the directions below to create the appropriate type of data table. 5.4.4.1 Displaying Data Tables Your first step is to create a data frame object in your R code. If you are displaying a data set (rare), then you will either need to read in the data or call that data frame. For this example, we’ll be using the mtcars data frame that is part of R. If you are making a Summary Data Table, you’ll need to either use R to calculate the values and store in a data frame or create a data frame yourself. In either case, be sure you identify what columns you’re going to use. If your original data file has 50 columns, but your App only makes use of 5, drop the other 45. Only display the columns that you actually use. Your next step is to decide on where to put this display (e.g., inside an Exploration Tab or as a separate page). This will help you identify where in your App’s UI section you need to put the appropriate code. To ensure that your data table is accessible and responsive (i.e., mobile friendly), you will need to use the DT package. install.packages(&quot;DT&quot;) # Be sure to include this in your library call library(DT) In your UI section, you’ll need to use the following code, placed in the appropriate area: # [code omitted] DT::DTOutput(outputId = &quot;mtCars&quot;) # [code omitted] Then, in your Server section, you’ll need to use the following code: # [code omitted] # Prepare your data set with only the columns needed carData &lt;- mtcars[,c(&quot;mpg&quot;, &quot;cyl&quot;, &quot;hp&quot;, &quot;gear&quot;, &quot;wt&quot;)] ## Use Short but Meaningful Column Names names(carData) &lt;- c(&quot;MPG&quot;, &quot;# of Cylinders&quot;, &quot;Horsepower&quot;, &quot;# of Gears&quot;, &quot;Weight&quot;) # Create the output data table # Be sure to use the same name as you did in the UI output$mtCars &lt;- DT::renderDT( expr = carData, caption = &quot;Motor Trend US Data, 1973-1974 Models&quot;, # Add a caption to your table style = &quot;bootstrap4&quot;, # You must use this style rownames = TRUE, options = list( # You must use these options responsive = TRUE, # allows the data table to be mobile friendly scrollX = TRUE, # allows the user to scroll through a wide table columnDefs = list( # These will set alignment of data values # Notice the use of ncol on your data frame; leave the 1 as is. list(className = &#39;dt-center&#39;, targets = 1:ncol(carData)) ) ) ) # [code omitted] If you are making a Summary Data Table, you will need to follow the same process. If your data frame does not have row names, but instead a column with values acting as row names, you may replace the rownames = TRUE with rownames = FALSE; there should not be a column of sequential numbers on the left. Column names MUST be simple and meaningful to the user. To this end, you should rename any columns that might have poor choices for names, just as we have done with the mtcars data. This includes using Greek characters in isolation. You should not have any columns labeled \\(\\mu\\) or \\(\\sigma\\). Rather you need to use English words. Note: getting mathematical expressions to render properly in graphical environments in R is not as easy as in the paragraphs or headers of an app. Only certain graphing packages support limited mathematical expressions. The same is true for table generation packages. Again, try to use tables as infrequently as possible. Poorly constructed tables can create accessibility issues causing screen readers to poorly communicate tables to your users. If you run into problems and/or have questions, talk to Neil and Bob. 5.4.4.2 Additional Table Examples We’re including some additional Summary Data Table examples. For these examples, I’m going to make use of the palmerpenguins package of data sets. 5.4.4.2.1 Summary Data Table of Descriptive Statistics library(palmerpenguins) library(psych) library(DT) library(tibble) penStats &lt;- psych::describeBy( x = penguins$body_mass_g, group = penguins$species, mat = TRUE, # Formats output appropriate for DT digits = 3 # sets the number of digits retained ) # Picking which columns to keep penStats &lt;- penStats[, c(&quot;group1&quot;, &quot;n&quot;, &quot;mean&quot;, &quot;sd&quot;, &quot;median&quot;, &quot;mad&quot;, &quot;min&quot;, &quot;max&quot;, &quot;skew&quot;, &quot;kurtosis&quot;)] # Make the group1 column the row names penStats &lt;- tibble::remove_rownames(penStats) penStats &lt;- tibble::column_to_rownames(penStats, var = &quot;group1&quot;) # Improve column names names(penStats) &lt;- c(&quot;Count&quot;, &quot;SAM (g/penguin)&quot;, &quot;SASD (g)&quot;, &quot;Median (g)&quot;, &quot;MAD (g)&quot;, &quot;Min (g)&quot;, &quot;Max (g)&quot;, &quot;Sample Skewness (g^3)&quot;, &quot;Sample Excess Kurtosis (g^4)&quot;) # Make the Table output$penguinSummary &lt;- DT::renderDT( expr = penStats, caption = &quot;Descriptive Stats for Palmer Penguins&quot;, style = &quot;bootstrap4&quot;, rownames = TRUE, autoHideNavigation = TRUE, options = list( responsive = TRUE, scrollX = TRUE, paging = FALSE, # Set to False for small tables columnDefs = list( list(className = &#39;dt-center&#39;, targets = 1:ncol(penStats)) ) ) ) 5.4.4.2.2 Summary Data Table for Output Table While this example is for an ANOVA table, you can build from this for other output tables. If you store the output of any call as an object, you can then use the structure function, str to investigate the output. Ultimately, you need something that is either a matrix or a data frame. library(palmerpenguins) library(psych) library(DT) library(tibble) library(rstatix) ## ## Attaching package: &#39;rstatix&#39; ## The following object is masked from &#39;package:stats&#39;: ## ## filter # This bad practice but I&#39;m going to pretend that all assumptions are met penModel &lt;- aov(body_mass_g ~ species*sex, data = penguins) anovaPen &lt;- round(anova(penModel), 3) # Rounding to truncate decimals # Make the Table output$penguinAnova &lt;- DT::renderDT( expr = anovaPen, caption = &quot;(Classical) ANOVA Table for Palmer Pengins&quot;, style = &quot;bootstrap4&quot;, rownames = TRUE, options = list( responsive = TRUE, scrollX = TRUE, paging = FALSE, # Set to False for small tables columnDefs = list( list(className = &#39;dt-center&#39;, targets = 1:ncol(anovaPen)) ) ) ) 5.4.5 Static Images Static image refers to any image you’re using in your App which is not produced by R. These are usually PNG or JPG/JPEG files which you end up calling in the UI portion of your code. Within your App’s folder/directory, there needs to be a sub-folder/directory called www. This is the place where you’ll need to place ALL static image files. 5.4.5.1 Adding an Image To include the image in your App, you’ll need to make use of the image tag, img. When you run your App, Shiny automatically knows to check the www folder any time the img tag gets called. Here is an example supposing that the check mark image for correct answers is in the app’s www folder: #[code omitted] div(align = &quot;right&quot;, img(src = &quot;check.PNG&quot;, alt = &quot;Success, you are correct&quot;, width = 25, #these are in pixels height = 25, )) #[code omitted] You’ll notice that we’ve wrapped the img call in a div call. The div call allows us to specify that we want the image to be right aligned; you could also do left or center. You can replace the div call with the paragraph environment and include text on either side, effectively making your image part of the text. #[code omitted] p(&quot;Check your answer here --&gt;&quot;, img(src = &quot;check.PNG&quot;, alt = &quot;Success, you are correct&quot;, width = 25, height = 25), &quot;&lt;-- Check your answer here&quot;), #[code omitted] 5.4.5.2 Sizing and Positioning Your Image All image files have a native size that is part of that file. For instance, the check mark image is 270 x 250 pixels. However, we overrode that that sizing with the width and height arguments. How did we decide on 25 x 25? Honestly, through guessing and checking. You’ll need to think about how you’re using the image and let that guide your decision making. There is no one size fits all solution. While finding an optimal size and position for your image can take some time, seeing bad settings is pretty obvious. Feel free to reach out to Neil and Bob for assistance. 5.4.6 Alt Text Any graphical element you include in your App MUST have an alternative (assistive) text description (“alt text”). This provides a short description of what is in the image or plot for users who are visual impaired. (Tables, when properly formatted will handle this automatically.) Here are several resources worth checking out: WebAIM Alternative Text Guide Penn State’s Image ALT Text Page W3C’s ALT Text Decision Tree 5.4.6.1 Adding Alt Text to Static Images In the prior section on static images, you saw exactly how to set the alt text; here is a generic example: #[code omitted] img(src = &quot;yourImage.PNG&quot;, alt = &quot;Short description of what&#39;s in the pic&quot;, width = 25, height = 25) #[code omitted] 5.4.6.2 Adding Alt Text Graphs At this point in time (6/10/2020), adding alt text to plots generated in R is not as easy as for static pictures. While there are some potential changes coming down the pipe, there is not a firm time line for the addition of appropriate arguments to the existing render* functions. Therefore we will need to put in some (hopefully) temporary measures. In particular, we will use Accessible Rich Internet Applications (ARIA) to assist us in writing some labels that will stand in place of formal alt text. To do this, you will need to make use of the following code: # [code omitted] # In the UI section, in the appropriate tabItem plotOutput(outputId = plotID) # Look for lines like this # Code for adding the aria label tags$script(HTML( &quot;$(document).ready(function() { document.getElementById(&#39;plotId&#39;).setAttribute(&#39;aria-label&#39;, `General description of the plot`) })&quot; )) # [code omitted] Important things to note: Place the tags$script(HTML(...)) code right after each instance of plotOutput. Copy the above code as formatted Change the two (2) pieces for each particular plot Replace plotId (keep the single quotation marks in the code) Replace General description of the plot (keep the single quotation marks in the code) "]
]
